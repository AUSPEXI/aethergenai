name: ip-guard

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  ip-guard:
    name: Repository IP/Secret Guard
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install minimal deps (if package.json exists)
        if: ${{ hashFiles('package.json') != '' }}
        run: |
          if [ -f package-lock.json ] || [ -f pnpm-lock.yaml ] || [ -f yarn.lock ]; then
            npm ci --ignore-scripts --no-audit --no-fund
          else
            npm install --ignore-scripts --no-audit --no-fund
          fi

      - name: Run local IP check (static repo assertions)
        if: ${{ hashFiles('scripts/prepush-ip-check.mjs') != '' }}
        run: |
          node scripts/prepush-ip-check.mjs || exit 1

      - name: Quick content grep for obvious secrets
        run: |
          set -e
          # High-signal patterns only (avoid false-positives on variable names like client_secret)
          PATTERN='AKIA[0-9A-Z]{16}|ASIA[0-9A-Z]{16}|-----BEGIN (EC|RSA|OPENSSH) PRIVATE KEY-----|xox[baprs]-[0-9a-zA-Z-]{10,}|ghp_[0-9A-Za-z]{36}|AIza[0-9A-Za-z\-_]{35}'
          if git grep -n --full-name -I -E "$PATTERN"; then
            echo "Potential secret-like content detected." >&2
            exit 1
          fi

      - name: Gitleaks full-history scan
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: ''
          args: --verbose --redact --depth=0 --report-path gitleaks-report.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload gitleaks report (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          if-no-files-found: ignore


